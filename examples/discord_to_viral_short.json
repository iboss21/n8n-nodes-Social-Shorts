{
  "name": "Discord → Viral Short: Story + Voice + Post (IG/TikTok/YT)",
  "nodes": [
    {
      "parameters": {
        "path": "shortform",
        "options": {
          "responseData": "{\"ok\": true}",
          "responseCode": 200
        }
      },
      "id": "Webhook",
      "name": "Webhook (Discord)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        240,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Expecting body: { prompt, niche, idea, duration, platforms, interaction{ id, token } }\nconst b = items[0].json || {};\nconst prompt = b.prompt || b.idea || b.niche || \"Quick tip for developers\";\nconst duration = Number(b.duration || 55);\nconst platforms = b.platforms || { tiktok: true, ig: true, yt: true };\nreturn [{\n  json: {\n    prompt, duration, platforms, interaction: b.interaction || null\n  }\n}];\n"
      },
      "id": "Normalize",
      "name": "Normalize Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        480,
        200
      ]
    },
    {
      "parameters": {
        "operation": "chat",
        "model": "gpt-4o-mini",
        "messages": [
          {
            "role": "system",
            "content": "You are a short-form storyteller and growth strategist."
          },
          {
            "role": "user",
            "content": "Niche/Prompt: {{$json.prompt}}\n\nTask: Create a *viral-ready* short video plan. Output a SINGLE JSON with:\n- story: 120–180 words, 5-beat arc, conversational, present tense.\n- script: 45–60s speaking script with line breaks every 6–10 words.\n- storyboard: exactly 5 scenes, each {desc: visual description, text: 3–6 word overlay}.\n- voice: {style: e.g., energetic/authoritative, pace: words per minute (e.g., 150)}.\n- hooks: list of 5 alternatives (≤12 words each, thumb-stopping).\n- title: ≤80 chars.\n- hashtags: 10 items (no punctuation).\n- cta: single friendly line.\n- brollHints: 6 keywords for background visuals/colors/mood.\n"
          }
        ]
      },
      "id": "LLM_Story",
      "name": "LLM: Story + Plan",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 4,
      "position": [
        720,
        200
      ],
      "credentials": {
        "openAiApi": {
          "id": "OPENAI_CREDENTIAL_PLACEHOLDER",
          "name": "OpenAI (set me)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const msg = items[0].json.choices?.[0]?.message?.content || items[0].json.text || '';\nlet data = {};\ntry { data = JSON.parse(msg); } catch(e){ data = { script: msg, story: msg, storyboard: [] }; }\n// pick best hook for title card\nconst bestHook = (data.hooks && data.hooks[0]) || (data.title || 'New Short');\nreturn [{ json: { ...data, bestHook } }];\n"
      },
      "id": "ParsePlan",
      "name": "Parse Plan JSON",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        980,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://api.elevenlabs.io/v1/text-to-speech/{{$env.ELEVENLABS_VOICE_ID}}/stream",
        "options": {
          "responseFormat": "file"
        },
        "sendBody": true,
        "jsonParameters": true,
        "headerParametersJson": "{\"xi-api-key\":\"{{$env.ELEVENLABS_API_KEY}}\",\"Content-Type\":\"application/json\"}",
        "bodyParametersJson": "{\"text\":\"={{$json.script}}\",\"model_id\":\"eleven_multilingual_v2\",\"voice_settings\":{\"stability\":0.5,\"similarity_boost\":0.7}}"
      },
      "id": "TTS",
      "name": "TTS (ElevenLabs) → voice.mp3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        1240,
        80
      ]
    },
    {
      "parameters": {
        "jsCode": "// Build a .srt from the script (rough per-line timing)\nconst script = $json.script || '';\nconst duration = $prevNode('Normalize Input').json.duration || 55;\nconst lines = script.split(/\\n+/).filter(Boolean);\nconst per = Math.max(1, Math.floor(duration / Math.max(1, lines.length)));\nlet t = 0;\nconst toTS = (s) => {\n  const hh = String(Math.floor(s/3600)).padStart(2,'0');\n  const mm = String(Math.floor((s%3600)/60)).padStart(2,'0');\n  const ss = String(s%60).padStart(2,'0');\n  return `${hh}:${mm}:${ss},000`;\n};\nlet srt = '';\nlines.forEach((line, i) => {\n  const start = t;\n  const end = Math.min(duration, start + per);\n  srt += `${i+1}\\n${toTS(start)} --> ${toTS(end)}\\n${line}\\n\\n`;\n  t = end;\n});\nreturn [{ json: { srt } }];\n"
      },
      "id": "MakeSRT",
      "name": "Make Subtitles (SRT)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1240,
        320
      ]
    },
    {
      "parameters": {
        "command": "set -e\nTMP=$(mktemp -d)\n# Inputs via files\nprintf \"%s\" \"{{ $json.srt }}\" > \"$TMP/subs.srt\"\nprintf \"%s\" \"{{ $prevNode('Parse Plan JSON').json.bestHook }}\" > \"$TMP/hook.txt\"\n# Save TTS\ncat > \"$TMP/voice.mp3\" <&0 || true\n"
      },
      "id": "PrepFiles",
      "name": "Prep temp files",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 2,
      "position": [
        1480,
        200
      ]
    },
    {
      "parameters": {
        "command": "set -e\n# Reuse $TMP created in previous step if available\nTMP_DIR=$(ls -td /tmp/* | head -1)\n[ -d \"$TMP_DIR\" ] || (echo \"Temp dir missing\" && exit 1)\n\n# Background color 1080x1920 with hook on top; you can swap to an image/video later\nffmpeg -y -f lavfi -i color=c=0x0f0f0f:s=1080x1920:d={{$prevNode('Normalize Input').json.duration}}             -vf \"drawtext=fontfile=/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf:textfile='$TMP_DIR/hook.txt':x=(w-text_w)/2:y=120:fontsize=72:fontcolor=white:box=1:boxcolor=0x00000099,                  subtitles='$TMP_DIR/subs.srt':force_style='FontName=DejaVu Sans,Fontsize=36,PrimaryColour=&Hffffff&,OutlineColour=&H000000&,BorderStyle=1,Outline=2,Shadow=1'\"             -c:v libx264 -pix_fmt yuv420p \"$TMP_DIR/bg.mp4\"\n\nif [ -f \"$TMP_DIR/voice.mp3\" ]; then\n  ffmpeg -y -i \"$TMP_DIR/bg.mp4\" -i \"$TMP_DIR/voice.mp3\" -shortest -c:v libx264 -c:a aac /tmp/output.mp4\nelse\n  ffmpeg -y -i \"$TMP_DIR/bg.mp4\" -c:v libx264 -pix_fmt yuv420p /tmp/output.mp4\nfi\n\necho \"/tmp/output.mp4\"\n"
      },
      "id": "FFmpeg",
      "name": "Render with FFmpeg (story+subs+voice)",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 2,
      "position": [
        1720,
        200
      ]
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "={{$env.S3_BUCKET}}",
        "binaryData": true,
        "fileName": "shorts/{{$now}}.mp4",
        "options": {}
      },
      "id": "S3Upload",
      "name": "S3: Upload",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 3,
      "position": [
        1960,
        200
      ],
      "credentials": {
        "s3": {
          "id": "AWS_S3_CREDENTIAL_PLACEHOLDER",
          "name": "AWS S3 (set me)"
        }
      }
    },
    {
      "parameters": {
        "operation": "presign",
        "bucketName": "={{$env.S3_BUCKET}}",
        "fileKey": "={{$json.fileName}}",
        "expiry": 3600
      },
      "id": "S3Presign",
      "name": "S3: Presign (1h)",
      "type": "n8n-nodes-base.s3",
      "typeVersion": 3,
      "position": [
        2200,
        200
      ],
      "credentials": {
        "s3": {
          "id": "AWS_S3_CREDENTIAL_PLACEHOLDER",
          "name": "AWS S3 (set me)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const j = $prevNode('Parse Plan JSON').json;\nconst title = (j.title || j.bestHook || 'New Short').slice(0,80);\nconst tags = (j.hashtags || []).map(h => h.startsWith('#')? h : '#'+h).join(' ');\nconst caption = `${title}\\n${tags}\\n${j.cta || ''}`.slice(0, 400);\nreturn [{ json: { title, caption } }];\n"
      },
      "id": "Caption",
      "name": "Compose Caption",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        2440,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$prevNode('Normalize Input').json.platforms.tiktok === true}}"
            }
          ]
        }
      },
      "id": "IfTT",
      "name": "IF TikTok?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2680,
        100
      ]
    },
    {
      "parameters": {
        "url": "={{$env.TIKTOK_UPLOAD_INIT}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "jsonParameters": true,
        "bodyParametersJson": "{\"upload_type\":\"video\"}"
      },
      "id": "TT_Init",
      "name": "TikTok: Init Upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2920,
        40
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "TIKTOK_OAUTH_PLACEHOLDER",
          "name": "TikTok OAuth (set me)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$json.upload_url}}",
        "sendBinaryData": true,
        "binaryPropertyName": "data"
      },
      "id": "TT_Upload",
      "name": "TikTok: Upload Binary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3160,
        40
      ]
    },
    {
      "parameters": {
        "url": "={{$env.TIKTOK_PUBLISH}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "jsonParameters": true,
        "bodyParametersJson": "{\"video_id\":\"={{$json.video_id}}\",\"caption\":\"={{$prevNode('Compose Caption').json.caption}}\"}"
      },
      "id": "TT_Publish",
      "name": "TikTok: Publish",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3400,
        40
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "TIKTOK_OAUTH_PLACEHOLDER",
          "name": "TikTok OAuth (set me)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$prevNode('Normalize Input').json.platforms.ig === true}}"
            }
          ]
        }
      },
      "id": "IfIG",
      "name": "IF Instagram?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2680,
        220
      ]
    },
    {
      "parameters": {
        "url": "={{'https://graph.facebook.com/v19.0/' + $env.IG_USER_ID + '/media'}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "jsonParameters": true,
        "bodyParametersJson": "{\"media_type\":\"REELS\",\"video_url\":\"={{$prevNode('S3: Presign (1h)').json.url}}\",\"caption\":\"={{$prevNode('Compose Caption').json.caption}}\",\"share_to_feed\":\"true\"}"
      },
      "id": "IG_Create",
      "name": "Instagram: Create Container",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2920,
        200
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "FB_IG_OAUTH_PLACEHOLDER",
          "name": "Facebook/IG OAuth (set me)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{'https://graph.facebook.com/v19.0/' + $env.IG_USER_ID + '/media_publish'}}",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "jsonParameters": true,
        "bodyParametersJson": "{\"creation_id\":\"={{$json.id}}\"}"
      },
      "id": "IG_Publish",
      "name": "Instagram: Publish",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3160,
        200
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "FB_IG_OAUTH_PLACEHOLDER",
          "name": "Facebook/IG OAuth (set me)"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{$prevNode('Normalize Input').json.platforms.yt === true}}"
            }
          ]
        }
      },
      "id": "IfYT",
      "name": "IF YouTube?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2680,
        360
      ]
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/upload/youtube/v3/videos?uploadType=resumable&part=snippet,status",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "jsonParameters": true,
        "headerParametersJson": "{\"X-Upload-Content-Type\":\"video/*\"}",
        "bodyParametersJson": "{\"snippet\":{\"title\":\"={{$prevNode('Compose Caption').json.title}}\",\"description\":\"={{$prevNode('Compose Caption').json.caption}}\",\"categoryId\":\"22\"},\"status\":{\"privacyStatus\":\"public\",\"selfDeclaredMadeForKids\":false,\"shorts\":\"true\"}}"
      },
      "id": "YT_Init",
      "name": "YouTube: Init Resumable",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        2920,
        340
      ],
      "credentials": {
        "oAuth2Api": {
          "id": "YOUTUBE_OAUTH_PLACEHOLDER",
          "name": "YouTube OAuth (set me)"
        }
      }
    },
    {
      "parameters": {
        "url": "={{$json.headers.location}}",
        "sendBinaryData": true,
        "binaryPropertyName": "data"
      },
      "id": "YT_Upload",
      "name": "YouTube: Upload Binary",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3160,
        340
      ]
    },
    {
      "parameters": {
        "databaseId": "={{$env.NOTION_DB_ID}}",
        "operation": "create",
        "columns": [
          "Date",
          "Prompt",
          "Title",
          "Platforms",
          "S3",
          "TikTok",
          "Instagram",
          "YouTube",
          "Report"
        ],
        "values": "={{[ $now, $prevNode('Normalize Input').json.prompt, $prevNode('Compose Caption').json.title, JSON.stringify($prevNode('Normalize Input').json.platforms), $prevNode('S3: Presign (1h)').json.url, $prevNode('TikTok: Publish').json.url || '', $prevNode('Instagram: Publish').json.id || '', $prevNode('YouTube: Upload Binary').json.id || '', $prevNode('Report').json.text ]}}"
      },
      "id": "Notion",
      "name": "Notion: Write Report",
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2,
      "position": [
        3720,
        200
      ],
      "credentials": {
        "notionApi": {
          "id": "NOTION_CRED_PLACEHOLDER",
          "name": "Notion (set me)"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const plan = $prevNode('Parse Plan JSON').json;\nconst caption = $prevNode('Compose Caption').json.caption;\nconst s3 = $prevNode('S3: Presign (1h)').json.url;\nconst platforms = $prevNode('Normalize Input').json.platforms;\nconst summary = `\nWhat I did:\n- Built story & script with LLM\n- Generated voiceover via TTS\n- Rendered video with FFmpeg (9:16, subtitles, voiceover)\n- Uploaded to S3 and presigned\n- Posted to ${Object.keys(platforms).filter(k=>platforms[k]).join(', ')}\n\nHow:\n- Prompt: \"${$prevNode('Normalize Input').json.prompt}\"\n- Hook: \"${plan.bestHook}\"\n- Style: ${plan.voice?.style || 'n/a'} @ ${plan.voice?.pace || 'n/a'} wpm\n- Caption: ${caption.slice(0,200)}...\n\nLinks:\n- S3: ${s3}\n`.trim();\nreturn [{ json: { text: summary } }];\n"
      },
      "id": "Report",
      "name": "Build Report Text",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        3480,
        200
      ]
    },
    {
      "parameters": {
        "url": "https://discord.com/api/v10/webhooks/{{$env.DISCORD_APP_ID}}/{{ $json.interaction.token }}",
        "jsonParameters": true,
        "options": {},
        "bodyParametersJson": "{\"content\":\"={{$prevNode('Report').json.text}}\"}"
      },
      "id": "DiscordFollowup",
      "name": "Discord Follow-up (Report)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        3960,
        200
      ]
    }
  ],
  "connections": {
    "Webhook (Discord)": {
      "main": [
        [
          {
            "node": "Normalize Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize Input": {
      "main": [
        [
          {
            "node": "LLM: Story + Plan",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LLM: Story + Plan": {
      "main": [
        [
          {
            "node": "Parse Plan JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Plan JSON": {
      "main": [
        [
          {
            "node": "TTS (ElevenLabs) → voice.mp3",
            "type": "main",
            "index": 0
          },
          {
            "node": "Make Subtitles (SRT)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TTS (ElevenLabs) → voice.mp3": {
      "main": [
        [
          {
            "node": "Prep temp files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Make Subtitles (SRT)": {
      "main": [
        [
          {
            "node": "Prep temp files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prep temp files": {
      "main": [
        [
          {
            "node": "Render with FFmpeg (story+subs+voice)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Render with FFmpeg (story+subs+voice)": {
      "main": [
        [
          {
            "node": "S3: Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3: Upload": {
      "main": [
        [
          {
            "node": "S3: Presign (1h)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "S3: Presign (1h)": {
      "main": [
        [
          {
            "node": "Compose Caption",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose Caption": {
      "main": [
        [
          {
            "node": "IF TikTok?",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF Instagram?",
            "type": "main",
            "index": 0
          },
          {
            "node": "IF YouTube?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Build Report Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF TikTok?": {
      "main": [
        [
          {
            "node": "TikTok: Init Upload",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "TikTok: Init Upload": {
      "main": [
        [
          {
            "node": "TikTok: Upload Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "TikTok: Upload Binary": {
      "main": [
        [
          {
            "node": "TikTok: Publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Instagram?": {
      "main": [
        [
          {
            "node": "Instagram: Create Container",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Instagram: Create Container": {
      "main": [
        [
          {
            "node": "Instagram: Publish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF YouTube?": {
      "main": [
        [
          {
            "node": "YouTube: Init Resumable",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "YouTube: Init Resumable": {
      "main": [
        [
          {
            "node": "YouTube: Upload Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Report Text": {
      "main": [
        [
          {
            "node": "Notion: Write Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord Follow-up (Report)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  }
}